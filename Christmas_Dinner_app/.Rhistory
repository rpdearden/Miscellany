if(!require(devtools)) install.packages("devtools")
install_github("TGuillerme/dispRity", ref = "release")
library(dispRity)
install.packages("devtools")
devtools::install_github("liamrevell/phytools")
devtools::install_github("graemetlloyd/Claddis")
devtools::install_github("graemetlloyd/Claddis")
?Claddis
Claddis?
fqgert
??Claddis
install_github("TGuillerme/dispRity", ref = "release")
devtools::install_github("TGuillerme/dispRity", ref = "release")
devtools::install_github("TGuillerme/dispRity", ref = "release")
install.packages("devtools")
install.packages("devtools")
install_github("TGuillerme/dispRity", ref = "release")
library("devtools")
install_github("TGuillerme/dispRity", ref = "release")
install("caper")
install.packages("caper")
install_github("TGuillerme/dispRity", ref = "release")
library(dispRity)
library(dispRity)
library(dispRity)
library(dispRity)
library(dispRity)
## Loading demo and the package data
library(dispRity)
## Setting the random seed for repeatability
set.seed(123)
## Loading the data
data(McClean_data)
## This dataset contains an ordinated matrix (20 dimensions) of the distance
## between 40 experimental plots.
ord_matrix <- McClean_data$ordination
## As well as two list of different factors affecting each experimental plot: treatment and depth.
treatments <- McClean_data$treatment
depth <- McClean_data$depth
depth
ord_matrix
McClean_data
x <- ord_matrix[, 1]
y <- ord_matrix[, 2]
## Setting the colors that will represent the treatments
cols <- sub("a", "red", treatments)
cols <- sub("b", "blue", cols)
## Setting the symbols that will represent the depth
pchs <- sub(1, 16, depth)
pchs <- as.numeric(sub(2, 17, pchs))
par(bty = "n")
plot(x, y, col = cols, pch = pchs, xlab = "PC 1", ylab = "PC 2", xlim = range(x) + c(0, 100))
plot(x, y, col = cols, pch = pchs, xlab = "PC 1", ylab = "PC 2", xlim = range(x) + c(0, 100))
## Creating the table that contain the elements and their attributes
factors <- as.data.frame(matrix(data = c(treatments, depth), nrow = nrow(ord_matrix),
ncol = 2, byrow = FALSE, dimnames = list(rownames(ord_matrix))))
names(factors) <- c("Treat", "Depth")
head(factors)
## Splitting the ordinated space into four subsamples
(customised_subsamples <- custom.subsamples(ord_matrix, factors))
## Calculating disparity as the median distance between each elements and their group centroid
(disparity <- dispRity(customised_subsamples, metric = c(median, centroids)))
summary(disparity)
(bootstrapped_data <- boot.matrix(customised_subsamples, bootstraps = 100))
(bootstrapped_data <- boot.matrix(customised_subsamples, bootstraps = 100))
(rarefied_data <- boot.matrix(customised_subsamples, bootstraps = 100, rarefaction = 17))
## Calculating the bootstrapped disparity
disparity_BS <- dispRity(bootstrapped_data, metric = c(median, centroids))
## Calculating the rarefied disparity
disparity_rare <- dispRity(rarefied_data, metric = c(median, centroids))
disparity_rare <- dispRity(rarefied_data, metric = c(median, centroids))
## Summarising bootstrapped disparity
summary(disparity_BS)
## Summarising the rarefied disparity
summary(disparity_rare)
## Summarising the same results but using the mean as the central tendency and displaying
## the 90th quantile only.
summary(disparity_rare, quantile = 90, cent.tend = mean)
## Graphical options
quartz(width = 10, height = 5) ; par(mfrow = (c(1,2)), bty = "n")
## Plotting the bootstrapped disparity
plot(disparity_BS, main = "Bootstrapped data")
## Plotting the rarefied disparity
plot(disparity_rare, main = "Rarefied data")
## Testing the effect of our factors on the bootstrapped data
summary(test.dispRity(disparity_BS, test = aov, comparisons = "all"))
## Testing the effect of our factors on the rarefied data
summary(test.dispRity(disparity_rare, test = aov, comparisons = "all"))
## Post-hoc testing of the effect of the two different factors
## Note that the comparison contains the list of the pairs of subsamples to compare
test.dispRity(disparity_BS, test = wilcox.test, comparisons = list(c(1,2), c(3,4)))
## Testing the effect of the two different factors for the rarefied data
test.dispRity(disparity_rare, test = wilcox.test, comparisons = list(c(1,2), c(3,4)))
setwd("~/Documents/Side_projects/Masters_writeup/EarlyVerts_R_Code/CharRates_pipeline")
Kdata <- ReadMorphNexus("../Keating16.nex")
library(Claddis)
library(paleotree)
library(strap)
setwd("~/Documents/Side_projects/Masters_writeup/EarlyVerts_R_Code/CharRates_pipeline")
Kdata <- ReadMorphNexus("../Keating16.nex")
Ktree <- read.nexus("../KeatMaj.tre")
Kdates <- read.csv("../Keating16Dates.csv", header=TRUE,row.names=1)
#Break polytomies randomly
Ktree <- multi2di(Ktree)
#Reorder dates file to get in line with tree file
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]
#Scale tree using fads and lads
Ktree <- DatePhylo(Ktree, Kdates,method="equal", rlen=1)
#plot with geoscale (to check worked)
geoscalePhylo(ladderize(Ktree), cex.age=0.6, cex.ts=0.8, cex.tip=0.8)
#Calculate rates
rate.data <- DiscreteCharacterRate(Ktree, Kdata, seq(Ktree$root.time, Ktree$root.time - max(diag(vcv(Ktree))), length.out=6), alpha=0.01)
#Set up edge colours
edge.color <- rep("black", nrow(Ktree$edge))
edge.color[which(rate.data$branch.results[, "ml.signif.hi"] == 1)] <- "red"
edge.color[which(rate.data$branch.results[, "ml.signif.lo"] == 1)] <- "blue"
#Plot with these colours
# pdf("VertEdgeRates.pdf")
geoscalePhylo(ladderize(Ktree), cex.age=0.6, cex.ts=0.8, cex.tip=0.8, edge.color=edge.color[match(ladderize(Ktree)$edge[, 2], Ktree$edge[,2])])
# dev.off()
#Set up node colours
node.color <- rep("white", nrow(rate.data$node.results))
node.color[which(rate.data$node.results[, "ml.signif.hi.ib"] == 1)] <- "red"
node.color[which(rate.data$node.results[, "ml.signif.lo.ib"] == 1)] <- "blue"
node.color[which(is.na(rate.data$node.results[, "ml.signif.lo.ib"]))] <- NA
# Plot tree with node rates
#pdf("VertNodeRates.pdf")
geoscalePhylo(Ktree, cex.age=0.6, cex.ts=0.8, cex.tip=0.8)
nodelabels(node=rate.data$node.results[, "node"][!is.na(node.color)], pch=21, col="black", bg=node.color[!is.na(node.color)])
#dev.off()
?crown.stem
library(dispRity)
library(geomorph)
library(vegan)
library(cluster)
library(Claddis)
?crown.stem
?list
Ktree
Kdates
list("sluggy"=c(Cephalochordata, Tunicata, Myxinoidea, Petromyzontida, Jamoytius, Euphanerops, Euconodonta), "bony=c(Heterostraci, Arandaspida, Astraspis, Lasanius, Birkenia, Pterygolepis, Rhyncholepis, Cowielepis, Pharyngolepis, Osteostraci, Jawed_vertebrates, Galeaspida, Loganellia,Turinia)")
list("sluggy"=c("Cephalochordata"", Tunicata, Myxinoidea, Petromyzontida, Jamoytius, Euphanerops, Euconodonta), "bony=c(Heterostraci, Arandaspida, Astraspis, Lasanius, Birkenia, Pterygolepis, Rhyncholepis, Cowielepis, Pharyngolepis, Osteostraci, Jawed_vertebrates, Galeaspida, Loganellia,Turinia)")
?list
list("sluggy"=c("Cephalochordata", Tunicata, Myxinoidea, Petromyzontida, Jamoytius, Euphanerops, Euconodonta), "bony=c(Heterostraci, Arandaspida, Astraspis, Lasanius, Birkenia, Pterygolepis, Rhyncholepis, Cowielepis, Pharyngolepis, Osteostraci, Jawed_vertebrates, Galeaspida, Loganellia,Turinia)")
list("sluggy"=c("Cephalochordata", "Tunicata", "Myxinoidea", "Petromyzontida", "Jamoytius", "Euphanerops", "Euconodonta"), "bony=c("Heterostraci", "Arandaspida", "Astraspis", "Lasanius", "Birkenia", "Pterygolepis", "Rhyncholepis", "Cowielepis", "Pharyngolepis", "Osteostraci", "Jawed_vertebrates", "Galeaspida", "Loganellia" ,"Turinia")")
list("sluggy"=c("Cephalochordata", "Tunicata", "Myxinoidea", "Petromyzontida", "Jamoytius", "Euphanerops", "Euconodonta"), bony=c("Heterostraci", "Arandaspida", "Astraspis", "Lasanius", "Birkenia", "Pterygolepis", "Rhyncholepis", "Cowielepis", "Pharyngolepis", "Osteostraci", "Jawed_vertebrates", "Galeaspida", "Loganellia" ,"Turinia")")
qegrqegh
qht
3
13
ยง
)
""
list("sluggy"=c("Cephalochordata", "Tunicata", "Myxinoidea", "Petromyzontida", "Jamoytius", "Euphanerops", "Euconodonta"), bony=c("Heterostraci", "Arandaspida", "Astraspis", "Lasanius", "Birkenia", "Pterygolepis", "Rhyncholepis", "Cowielepis", "Pharyngolepis", "Osteostraci", "Jawed_vertebrates", "Galeaspida", "Loganellia" ,"Turinia"))
sluggy
list$sluggy
groups <- list("sluggy"=c("Cephalochordata", "Tunicata", "Myxinoidea", "Petromyzontida", "Jamoytius", "Euphanerops", "Euconodonta"), bony=c("Heterostraci", "Arandaspida", "Astraspis", "Lasanius", "Birkenia", "Pterygolepis", "Rhyncholepis", "Cowielepis", "Pharyngolepis", "Osteostraci", "Jawed_vertebrates", "Galeaspida", "Loganellia" ,"Turinia"))
sluggy
groups
groups$sluggy
?custom.subsets?
asf
?custom.subsets
custom.subsets(Ordkdata, group=groups)
setwd("~/Documents/Side_projects/Masters_writeup/EarlyVerts_R_Code/dispRity_Pipeline")
#Kdata <- ReadMorphNexus("../Keating16.nex")
Ktree <- read.nexus("../KeatMaj.tre")
Kdates <- read.csv("../Keating16Dates.csv", header=TRUE,row.names=1)
Kmatrix <- read.csv("../Keating16.csv", header=TRUE, row.names=1, stringsAsFactors = FALSE, na.strings="?") #Reads ? as NA?
#Replace - with -1 (will become 0 later)
Kmatrix[Kmatrix=="-"] <- -1
#Convert all remaining character columns into numeric
indx <- sapply(Kmatrix, is.character)
Kmatrix[indx] <- lapply(Kmatrix[indx], function(Kmatrix) as.numeric(as.character(Kmatrix)))
#Add 1 to all values
Kdata <- Kmatrix+1
Kdistances=daisy(Kdata, metric=c("gower"))
kdataNMDS<-metaMDS(Kdistances, k=3, zerodist="add")
#n.b. Ordination is stored in:
Ordkdata<-kdataNMDS$points
#Normal with text
plot(kdataNMDS)
text(kdataNMDS, cex=0.8)
#Run metaMDS with different numbers of axes
NMDS1=metaMDS(Kdistances, k=1, zerodist="add")
NMDS2=metaMDS(Kdistances, k=2, zerodist="add")
NMDS3=metaMDS(Kdistances, k=3, zerodist="add")
NMDS4=metaMDS(Kdistances, k=4, zerodist="add")
NMDS5=metaMDS(Kdistances, k=5, zerodist="add")
NMDS6=metaMDS(Kdistances, k=6, zerodist="add")
NMDS7=metaMDS(Kdistances, k=7, zerodist="add")
NMDS8=metaMDS(Kdistances, k=8, zerodist="add")
NMDS9=metaMDS(Kdistances, k=9, zerodist="add")
NMDS10=metaMDS(Kdistances, k=10, zerodist="add")
#Make vector containing stresses
Stresses=c(NMDS1$stress, NMDS2$stress, NMDS3$stress, NMDS4$stress, NMDS5$stress, NMDS6$stress, NMDS7$stress, NMDS8$stress, NMDS9$stress, NMDS10$stress)
#Plot it
barplot(Stresses, ylim=c(0, 0.30), names.arg=c(1:10), xlab="No. of axes", ylab="Stress")
Ktree$root.time <- 541
Kdates <- Kdates[match(Ktree$tip.label, rownames(Kdates)),]
DatedKtree<-DatePhylo(Ktree, Kdates, method="equal", rlen=1)
time_bins <- rev(seq(from = 250, to = 600, by = 50))
binned_Kdata <- chrono.subsets(data = Ordkdata, tree = Ktree, method = "discrete", time = time_bins, inc.nodes = FALSE,FADLAD = Kdates)
boot_bin_Kdata <- boot.matrix(binned_Kdata)
rare_bin_Kdata <- boot.matrix(binned_Kdata, bootstraps = 100,rarefaction = 6)
boot_disparity_Kdata <- dispRity(boot_bin_Kdata, metric = c(sum, variances))
rare_disparity_Kdata <- dispRity(rare_bin_Kdata, metric = c(sum, variances))
quartz(width = 10, height = 5) ; par(mfrow = (c(1,2)), bty = "n")
plot(boot_disparity_Kdata, type = "continuous", main = "bootstrapped results")
plot(rare_disparity_Kdata, type = "continuous", main = "rarefied results")
groups <- list("sluggy"=c("Cephalochordata", "Tunicata", "Myxinoidea", "Petromyzontida", "Jamoytius", "Euphanerops", "Euconodonta"), bony=c("Heterostraci", "Arandaspida", "Astraspis", "Lasanius", "Birkenia", "Pterygolepis", "Rhyncholepis", "Cowielepis", "Pharyngolepis", "Osteostraci", "Jawed_vertebrates", "Galeaspida", "Loganellia" ,"Turinia"))
custom.subsets(Ordkdata, group=groups)
custom.subsets(Ordkdata, group=Ktree)
?custom.subsets
Cladesgroup <- custom.subsets(Ordkdata, group=Ktree)
Cladesgroup
rare_bin_Kdata <- boot.matrix(Bonesgroup, bootstraps = 100,rarefaction = 6)
Bonesgroup <- custom.subsets(Ordkdata, group=groups)
rare_bin_Kdata <- boot.matrix(Bonesgroup, bootstraps = 100,rarefaction = 6)
Bonesgroup_rare <- boot.matrix(Bonesgroup, bootstraps = 100,rarefaction = 6)
Bonesgroup_disp <- dispRity(Bonesgroup_rare, metric = c(sum, variances))
Bonesgroup_Wilcox <- test.dispRity(Bonesgroup_disp, test=wilcox.test)
Bonesgroup_Wilcox
plot(Bonesgroup_disp, main = "Bones v non-bones")
text(1.5, 4000, paste0("p=",round(euro_diff[[2]][[1]], digit = 5)))
plot(Bonesgroup_disp, main = "Bones v non-bones")
text(1.5, 4000, paste0("p=",round(Bonesgroup_Wilcox[[2]][[1]], digit = 5)))
plot(Bonesgroup_disp, main = "Bones v non-bones")
text(1.5, 4000, paste0("p=",round(Bonesgroup_Wilcox[[2]][[1]], digit = 5)))
par(mfrow = c(2,2), bty = "n")
plot(Bonesgroup_disp, main = "Bones v non-bones")
text(1.5, 4000, paste0("p=",round(Bonesgroup_Wilcox[[2]][[1]], digit = 5)))
par(mfrow = c(2,2), bty = "n")
plot(Bonesgroup_disp, main = "Bones v non-bones")
text(1.5, 4000, paste0("p=",round(Bonesgroup_Wilcox[[2]][[1]], digit = 5)))
plot(Bonesgroup_disp, main = "Bones v non-bones")
text(1.5, 4000, paste0("p=",round(Bonesgroup_Wilcox[[2]][[1]], digit = 5)))
Cladesgroup <- custom.subsets(Ordkdata, group=Ktree)
Cladesgroup_rare <- boot.matrix(Cladesgroup, bootstraps = 100,rarefaction = 6)
Cladesgroup_disp <- dispRity(Cladesgroup_rare, metric = c(sum, variances))
Cladesgroup_Wilcox <- test.dispRity(Cladesgroup_disp, test=wilcox.test)
Cladesgroup_Wilcox
plot(Cladesgroup_disp, main = "Bones v non-bones")
text(1.5, 4000, paste0("p=",round(Cladesgroup_Wilcox[[2]][[1]], digit = 5)))
par(mfrow=c(1,1))
plot(Cladesgroup_disp, main = "Bones v non-bones")
text(1.5, 4000, paste0("p=",round(Cladesgroup_Wilcox[[2]][[1]], digit = 5)))
plot(Ktree)
plot(Ktree)
nodelabels()
?Claddis
change.times <- runif(100, 0, 100)
time.bins <- seq(100, 0, length.out=11)
ChangesInBins(change.times, time.bins)
shiny::runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
shiny::runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
?floor_date
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
library(beepr)
?beep
beep(sound=1)
beep(sound=5)
beep(sound=9)
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
runApp('Documents/Miscellany/Christmas_Dinner_app')
